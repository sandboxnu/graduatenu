diff --git a/packages/common/src/types.ts b/packages/common/src/types.ts
index 73977114..6eb7a5d1 100644
--- a/packages/common/src/types.ts
+++ b/packages/common/src/types.ts
@@ -95,11 +95,15 @@ export interface INEUReqCourseError {
 export interface INEUReqAndError {
   type: "and";
   missing: INEUReqError[];
+  subject?: string;
+  classId?: string;
 }
 
 export interface INEUReqOrError {
   type: "or";
   missing: INEUReqError[];
+  subject?: string;
+  classId?: string;
 }
 
 export interface TermError {
diff --git a/packages/frontend/components/Plan/Plan.tsx b/packages/frontend/components/Plan/Plan.tsx
index 763d35b0..0d5eaa79 100644
--- a/packages/frontend/components/Plan/Plan.tsx
+++ b/packages/frontend/components/Plan/Plan.tsx
@@ -28,6 +28,7 @@ interface PlanProps {
 }
 
 export const TotalYearsContext = createContext<number | null>(null);
+export const PlanContext = createContext<PlanModel<string> | null>(null);
 export const Plan: React.FC<PlanProps> = ({
   plan,
   mutateStudentWithUpdatedPlan,
@@ -112,44 +113,46 @@ export const Plan: React.FC<PlanProps> = ({
 
   return (
     <TotalYearsContext.Provider value={totalYears}>
-      <Flex direction="column" rowGap="sm">
-        <Flex flexDirection="column" rowGap="4xs" ref={setNodeRef}>
-          {plan.schedule.years.map((scheduleYear) => {
-            const isExpanded = expandedYears.has(scheduleYear.year);
+      <PlanContext.Provider value={plan}>
+        <Flex direction="column" rowGap="sm">
+          <Flex flexDirection="column" rowGap="4xs" ref={setNodeRef}>
+            {plan.schedule.years.map((scheduleYear) => {
+              const isExpanded = expandedYears.has(scheduleYear.year);
 
-            return (
-              <Flex key={scheduleYear.year} flexDirection="column">
-                <ScheduleYear
-                  catalogYear={plan.catalogYear}
-                  yearCoReqError={coReqErr?.years.find(
-                    (year) => year.year == scheduleYear.year
-                  )}
-                  yearPreReqError={preReqErr?.years.find(
-                    (year) => year.year == scheduleYear.year
-                  )}
-                  scheduleYear={scheduleYear}
-                  isExpanded={isExpanded}
-                  toggleExpanded={() => toggleExpanded(scheduleYear)}
-                  addClassesToTermInCurrPlan={addClassesToTermInCurrPlan}
-                  removeCourseFromTermInCurrPlan={
-                    removeCourseFromTermInCurrPlan
-                  }
-                  removeYearFromCurrPlan={() =>
-                    removeYearFromCurrPlan(scheduleYear.year)
-                  }
-                  setIsRemove={setIsRemove}
-                />
-              </Flex>
-            );
-          })}
+              return (
+                <Flex key={scheduleYear.year} flexDirection="column">
+                  <ScheduleYear
+                    catalogYear={plan.catalogYear}
+                    yearCoReqError={coReqErr?.years.find(
+                      (year) => year.year == scheduleYear.year
+                    )}
+                    yearPreReqError={preReqErr?.years.find(
+                      (year) => year.year == scheduleYear.year
+                    )}
+                    scheduleYear={scheduleYear}
+                    isExpanded={isExpanded}
+                    toggleExpanded={() => toggleExpanded(scheduleYear)}
+                    addClassesToTermInCurrPlan={addClassesToTermInCurrPlan}
+                    removeCourseFromTermInCurrPlan={
+                      removeCourseFromTermInCurrPlan
+                    }
+                    removeYearFromCurrPlan={() =>
+                      removeYearFromCurrPlan(scheduleYear.year)
+                    }
+                    setIsRemove={setIsRemove}
+                  />
+                </Flex>
+              );
+            })}
+          </Flex>
+          <Flex>
+            <AddYearButton
+              plan={plan}
+              mutateStudentWithUpdatedPlan={mutateStudentWithUpdatedPlan}
+            />
+          </Flex>
         </Flex>
-        <Flex>
-          <AddYearButton
-            plan={plan}
-            mutateStudentWithUpdatedPlan={mutateStudentWithUpdatedPlan}
-          />
-        </Flex>
-      </Flex>
+      </PlanContext.Provider>
     </TotalYearsContext.Provider>
   );
 };
diff --git a/packages/frontend/components/Plan/ReqErrorModal.tsx b/packages/frontend/components/Plan/ReqErrorModal.tsx
index e2e71758..cb377548 100644
--- a/packages/frontend/components/Plan/ReqErrorModal.tsx
+++ b/packages/frontend/components/Plan/ReqErrorModal.tsx
@@ -1,7 +1,8 @@
-import { WarningIcon, WarningTwoIcon } from "@chakra-ui/icons";
+import { AddIcon, WarningIcon, WarningTwoIcon } from "@chakra-ui/icons";
 import {
   Box,
   Flex,
+  IconButton,
   Modal,
   ModalBody,
   ModalCloseButton,
@@ -27,12 +28,23 @@ import {
   GENERIC_ERROR_MSG,
   SEARCH_NEU_FETCH_COURSE_ERROR_MSG,
   SPRING_4_COOP_ERROR_MSG,
+  addClassesToTerm,
+  cleanDndIdsFromPlan,
   getCourseDisplayString,
+  handleApiClientError,
+  updatePlanForStudent,
 } from "../../utils";
-import { useFetchCourse } from "../../hooks";
+import {
+  fetchStudentAndPrepareForDnd,
+  useFetchCourse,
+  useStudentWithPlans,
+} from "../../hooks";
 import { GraduateToolTip } from "../GraduateTooltip";
 import { SetStateAction, useContext } from "react";
-import { ErrorModalError, TotalYearsContext } from "./";
+import { ErrorModalError, TotalYearsContext, PlanContext } from "./";
+import { API } from "@graduate/api-client";
+import { useRouter } from "next/router";
+import { IsGuestContext } from "../../pages/_app";
 
 interface ReqErrorModalProps {
   setHovered: (isHovered: SetStateAction<boolean>) => void;
@@ -115,7 +127,7 @@ export const ReqErrorModal: React.FC<ReqErrorModalProps> = ({
                   alignItems="center"
                   mb="xs"
                   columnGap="2xs"
-                  justifyContent="center"
+                  justifyContent="left"
                 >
                   <Text fontWeight="semibold" textAlign="center">
                     Co-requisite Errors
@@ -126,7 +138,12 @@ export const ReqErrorModal: React.FC<ReqErrorModalProps> = ({
                     )}.`}
                   />
                 </Flex>
-                <ParseCourse course={coReqErr} parent={true} />
+                <ParseCourse
+                  course={coReqErr}
+                  parent={true}
+                  term={term}
+                  originalCourse={course}
+                />
               </Flex>
             )}
             {(preReqErr || coopErr) && (
@@ -135,7 +152,7 @@ export const ReqErrorModal: React.FC<ReqErrorModalProps> = ({
                   alignItems="center"
                   mb="xs"
                   columnGap="2xs"
-                  justifyContent="center"
+                  justifyContent="left"
                 >
                   <Text fontWeight="semibold" textAlign="center">
                     Pre-requisite Errors
@@ -146,7 +163,12 @@ export const ReqErrorModal: React.FC<ReqErrorModalProps> = ({
                     )}.`}
                   />
                 </Flex>
-                <ParseCourse course={preReqErr} parent={true} />
+                <ParseCourse
+                  course={preReqErr}
+                  parent={true}
+                  term={term}
+                  originalCourse={course}
+                />
               </Flex>
             )}
             {coopErr && (
@@ -165,21 +187,111 @@ export const ReqErrorModal: React.FC<ReqErrorModalProps> = ({
 interface ParseCourseProps {
   course?: INEUReqError;
   parent: boolean;
+  term?: ScheduleTerm2<string>;
+  originalCourse?: ScheduleCourse2<unknown>;
 }
 
-// Look through the course error until there are no more errors!
-// TODO: Fix the styling!
 const ParseCourse: React.FC<ParseCourseProps> = ({
-  course = undefined,
+  course,
   parent,
+  term,
+  originalCourse,
 }) => {
-  if (course == undefined) {
+  // Use the context directly
+  const plan = useContext(PlanContext);
+
+  // Get student and mutateStudent
+  const { student, mutateStudent } = useStudentWithPlans();
+
+  const { course: fetchedCourse } = useFetchCourse(
+    course?.subject || "",
+    course?.classId || ""
+  );
+
+  const router = useRouter();
+  const { isGuest } = useContext(IsGuestContext);
+
+  if (!course || !plan) {
     return <></>;
   }
 
+  const addCourseToPlan = async (
+    course: INEUReqError,
+    term: ScheduleTerm2<string>,
+    originalCourse: ScheduleCourse2<unknown>
+  ) => {
+    if (fetchedCourse && student && originalCourse) {
+      // Create updated plan
+      const updatedPlan = addClassesToTerm(
+        [fetchedCourse],
+        parseInt(term.id[0]),
+        term.season,
+        plan
+      );
+
+      // Create updated student for optimistic update
+      const updatedStudent = updatePlanForStudent(student, updatedPlan);
+
+      // Use mutateStudent for optimistic updates
+      mutateStudent(
+        async () => {
+          // Clean plan data before saving
+          const cleanedPlan = cleanDndIdsFromPlan(updatedPlan);
+
+          if (isGuest) {
+            const cleanedPlanWithUpdatedTimeStamp = {
+              ...cleanedPlan,
+              updatedAt: new Date(),
+            };
+            window.localStorage.setItem(
+              "student",
+              JSON.stringify({
+                ...student,
+                plans: student.plans.map((p) =>
+                  p.id === cleanedPlanWithUpdatedTimeStamp.id
+                    ? cleanedPlanWithUpdatedTimeStamp
+                    : p
+                ),
+              })
+            );
+          } else {
+            await API.plans.update(updatedPlan.id, cleanedPlan);
+          }
+          return fetchStudentAndPrepareForDnd(isGuest);
+        },
+        {
+          optimisticData: updatedStudent,
+          rollbackOnError: true,
+          revalidate: false,
+        }
+      ).catch((error) => {
+        handleApiClientError(error, router);
+      });
+    }
+  };
+
   switch (course.type) {
     case "course":
-      return <ReqCourseError courseError={course} isParent={parent} />;
+      return (
+        <Flex align="center" justify={"space-between"}>
+          <ReqCourseError courseError={course} isParent={parent} />
+          <IconButton
+            aria-label="Add class"
+            icon={<AddIcon />}
+            color="primary.blue.light.main"
+            borderColor="primary.blue.light.main"
+            colorScheme="primary.blue.light.main"
+            isRound
+            size="xs"
+            ml="2"
+            onClick={() =>
+              term &&
+              originalCourse &&
+              addCourseToPlan(course, term, originalCourse)
+            }
+          />
+        </Flex>
+      );
 
     case "and":
       return (
@@ -187,7 +299,12 @@ const ParseCourse: React.FC<ParseCourseProps> = ({
           {course.missing.map((c, index) => (
             <Flex direction="column" key={index}>
               <BorderContainer>
-                <ParseCourse course={c} parent={false} />
+                <ParseCourse
+                  course={c}
+                  parent={false}
+                  term={term}
+                  originalCourse={originalCourse}
+                />
               </BorderContainer>
               {index < course.missing.length - 1 && (
                 <Text fontSize="md" textAlign="center">
@@ -198,13 +315,19 @@ const ParseCourse: React.FC<ParseCourseProps> = ({
           ))}
         </>
       );
+
     case "or":
       return (
         <>
           {course.missing.map((c, index) => (
             <Flex direction="column" key={index}>
               <BorderContainer>
-                <ParseCourse course={c} parent={false} />
+                <ParseCourse
+                  course={c}
+                  parent={false}
+                  term={term}
+                  originalCourse={originalCourse}
+                />
               </BorderContainer>
               {index < course.missing.length - 1 && (
                 <Text fontSize="md" textAlign="center">
@@ -215,6 +338,7 @@ const ParseCourse: React.FC<ParseCourseProps> = ({
           ))}
         </>
       );
+
     default:
       assertUnreachable(course);
   }
@@ -247,15 +371,15 @@ const ReqCourseError: React.FC<{
     courseError.classId
   );
 
-  /** Render only the course id when loading or if we can't fetch the course name. */
-  let content = (
-    <Text fontSize="md">{getCourseDisplayString(courseError)}: Loading...</Text>
-  );
+  // Instead of JSX, use simple strings or components that won't cause nesting
+  let displayContent;
 
   if (error) {
-    content = (
+    displayContent = (
       <Flex alignItems="center" columnGap="2xs">
-        <Text fontSize="md">{getCourseDisplayString(courseError)}</Text>
+        <Text as="span" fontSize="md">
+          {getCourseDisplayString(courseError)}
+        </Text>
         <GraduateToolTip
           label={SEARCH_NEU_FETCH_COURSE_ERROR_MSG}
           placement="top"
@@ -264,24 +388,26 @@ const ReqCourseError: React.FC<{
         </GraduateToolTip>
       </Flex>
     );
-  }
-
-  if (course) {
-    content = (
-      <Text fontSize="md">
-        {getCourseDisplayString(course)}: {course.name}
-      </Text>
-    );
+  } else if (course) {
+    displayContent = `${getCourseDisplayString(course)}: ${course.name}`;
+  } else {
+    displayContent = `${getCourseDisplayString(courseError)}: Loading...`;
   }
 
   return (
     <>
       {isParent ? (
         <BorderContainer>
-          <Text fontSize="md">{content}</Text>
+          {typeof displayContent === "string" ? (
+            <Text fontSize="md">{displayContent}</Text>
+          ) : (
+            displayContent
+          )}
         </BorderContainer>
+      ) : typeof displayContent === "string" ? (
+        <Text fontSize="md">{displayContent}</Text>
       ) : (
-        <Text fontSize="md">{content}</Text>
+        displayContent
       )}
     </>
   );
